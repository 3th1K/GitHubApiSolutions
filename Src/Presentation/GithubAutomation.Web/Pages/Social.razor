@page "/social"
@inject IGitHubAutomationService _gitHubService
@using static ComponentEnums

<PageTitle>Social Automation</PageTitle>

<div class="container mt-5">
    <h2 class="text-center mb-4">GitHub Social Automation</h2>
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-body">
                    @if (IsLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Processing your request, please wait...</p>
                        </div>
                    }
                    else
                    {
                        <form @onsubmit="HandleSubmit">
                            <div class="mb-3">
                                <label for="token" class="form-label">GitHub Token</label>
                                <input type="password" id="token" class="form-control" @bind="Token" placeholder="Enter your personal access token" required />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Provide a Number?</label>
                                <InputRadioGroup @bind-Value="SelectedOption">
                                    @foreach (var yn in Enum.GetValues<YesNo>())
                                    {
                                        <div class="form-check">
                                            <InputRadio class="form-check-input" Value="yn" />
                                            <label class="form-check-label">@yn</label>
                                        </div>
                                    }
                                </InputRadioGroup>
                            </div>
                            @if (SelectedOption is YesNo.Yes)
                            {
                                <div class="mb-3">
                                    <label for="numberInput" class="form-label">Number</label>
                                    <input type="number" id="numberInput" class="form-control" @bind="Number" placeholder="Enter a number" min="1" />
                                </div>
                            }
                            <div class="d-grid">
                                <button type="submit" class="btn btn-primary">Submit</button>
                            </div>
                        </form>
                    }

                    @if (!string.IsNullOrEmpty(ResponseMessage))
                    {
                        <div class="@(IsSuccess ? "alert mt-3 alert-success" : "alert mt-3 alert-danger")">
                            @ResponseMessage
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string Token { get; set; } = string.Empty;
    private YesNo SelectedOption { get; set; } = YesNo.No;
    private int Number { get; set; } = 100; // Default value
    private string ResponseMessage { get; set; } = string.Empty;
    private bool IsSuccess { get; set; }
    private bool IsLoading { get; set; } = false;

    private async Task HandleSubmit()
    {
        IsLoading = true;
        ResponseMessage = string.Empty;

        try
        {
            if (SelectedOption is YesNo.Yes)
            {
                await _gitHubService.AutomateGitHubSocialBoostAsync(Token, Number);
            }
            else
            {
                await _gitHubService.AutomateGitHubSocialBoostAsync(Token);
            }

            IsSuccess = true;
            ResponseMessage = "Social automation completed successfully!";
        }
        catch (Exception ex)
        {
            IsSuccess = false;
            ResponseMessage = $"Error: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }
}
